#!/usr/bin/env bash
set -e
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
. $dir/util
. $dir/config

# Functions

format_partitions() {
  mkfs.vfat -F32 $cf_boot_partition
  mkfs.$cf_mkfs_format_system_partition $cf_system_partition
}

mount_partitions() {
  mount $cf_system_partition /mnt
  mkdir /mnt/boot
  mount $cf_boot_partition /mnt/boot
}

sort_pacman_mirrors() {
  reflector --country $cf_pacman_mirror_country --protocol https --latest $cf_pacman_mirror_count --save /etc/pacman.d/mirrorlist
}

install_base_packages() {
  echo "/mnt $cf_base_packages" | xargs pacstrap
}

generate_fstab() {
  genfstab -U /mnt >> /mnt/etc/fstab
}

cp_install_files_root() {
  cp -rv $dir /mnt/linux-install
}

add_enable_swapfile() {
  dd if=/dev/zero of=/swapfile bs=1M count=$cf_swap_M_count status=progress
  chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile
  echo /swapfile none swap defaults 0 0 >> /etc/fstab
}

initialize_bootloader() {
  bootctl --path=/boot install
  cp -rv $dir/sys_config/systemd-boot/* /
  echo "options root=PARTUUID=$(blkid -s PARTUUID -o value $cf_system_partition) rw" >> /boot/loader/entries/arch.conf
}

enable_networkmanager() {
  systemctl enable NetworkManager
}

set_timezone() {
  ln -sf /usr/share/zoneinfo/$cf_timezone /etc/localtime
}

set_hardware_clock() {
  hwclock --systohc 
}

set_locale() {
  printf "$cf_locale_gen" > /etc/locale.gen
  locale-gen
  printf "$cf_locale_conf" > /etc/locale.conf
}

set_hostname() {
  echo $cf_hostname > /etc/hostname
}

set_root_password() {
  set_user_pw root
}

create_regular_user() {
  useradd -m $cf_username
  usermod -G wheel -a $cf_username
  set_user_pw $cf_username
}

set_sudoers() {
  cp $dir/sys_config/sudoers/etc/sudoers /etc
}

change_shell() {
  sudo chsh -s /bin/zsh root
  [ ! -f /root/.zshrc ] && sudo touch /root/.zshrc 

  chsh -s /bin/zsh $cf_username 
  [ ! -f /home/$cf_username/.zshrc ] && touch /home/$cf_username/.zshrc
}

install_pkg_pacman() {
  sudo pacman -S --needed - < $dir/pkg_pacman 
}

install_st() {
  temp_path=$(mktemp -d)
  git clone $cf_git_url_suckless_st $temp_path
  cd $temp_path
  git checkout 73c034ba05101e2fc337183af1cdec5bfe318b99
  sudo make install
  cd $HOME
}

install_pkg_aur() {
  if ! command -v yay &> /dev/null; then
    temp_path=$(mktemp -d)
    git clone https://aur.archlinux.org/yay.git $temp_path
    cd $temp_path
    makepkg -si
    cd $HOME
  fi
  yay -S --needed - < $dir/pkg_aur
}

install_nix_user_config() {
  temp_path=$(mktemp -d)
  git clone --separate-git-dir=$HOME/.dotfiles_git $cf_git_url_nix_user_config $temp_path
  rsync --recursive --verbose --exclude '.git' $temp_path/ $HOME
  git --git-dir=$HOME/.dotfiles_git/ --work-tree=$HOME config --local status.showUntrackedFiles no
}

install_nvim_user_config() {
  [ ! -d $HOME/.config ] && mkdir -p $HOME/.config
  git clone $cf_git_url_nvim_user_config $HOME/.config/nvim
}

install_nodejs() {
  mkdir -p $HOME/.nvm
  export NVM_DIR=$HOME/.nvm
  . /usr/share/nvm/nvm.sh
  nvm install $cf_nvm_default_nodejs_version
  nvm alias default $cf_nvm_default_nodejs_version
  nvm use default
}

install_pkg_npm() {
  npm install --global - < $dir/pkg_npm
}

set_post_reboot_script() {
  echo "/linux-install/main 2" >> /home/${cf_username}/.bashrc
}

activate_ntp() {
  sudo timedatectl set-ntp on
}

install_vbox_guest_mode() {
  if [ "$cf_is_vbox_guest" -eq "1" ]; then
    sudo pacman -S virtualbox-guest-utils
    sudo systemctl enable --now vboxservice.service
  fi
}

cleanup_bashrc() {
  tmp=$(mktemp)
  path_bashrc=/home/${cf_username}/.bashrc
  head -n -1 $path_bashrc > $tmp && mv $tmp $path_bashrc
}

# Scripts

pre_reboot_initial() {
  scriptname="Pre-reboot initial system installation script"
  echo_script_status 0 "$scriptname"

  fn_call \
    "format_partitions" \
    "mount_partitions" \
    "sort_pacman_mirrors" \
    "install_base_packages" \
    "generate_fstab" \
    "cp_install_files_root" \

  arch-chroot /mnt /linux-install/main 1
  echo_script_status 1 "$scriptname"
}

pre_reboot_on_chroot() {
  scriptname="Pre-reboot on-chroot system installation script"
  echo_script_status 0 "$scriptname"

  fn_call \
    "initialize_bootloader" \
    "add_enable_swapfile" \
    "enable_networkmanager" \
    "set_timezone" \
    "set_hardware_clock" \
    "set_locale" \
    "set_hostname" \
    "set_root_password" \
    "create_regular_user" \
    "set_sudoers" \
    "set_post_reboot_script"

  echo_script_status 1 "$scriptname"
  echo_br_bottom "Please reboot now and log into tty as $cf_username to complete the installation!"
}

post_reboot() {
  scriptname="Post-reboot system installation script"
  echo_script_status 0 "$scriptname"

  fn_call \
    "activate_ntp" \
    "install_vbox_guest_mode" \
    "install_pkg_pacman" \
    "install_st" \
    "install_pkg_aur" \
    "install_nix_user_config" \
    "install_nvim_user_config" \
    "install_nodejs" \
    "install_pkg_npm" \
    "change_shell" \
    "cleanup_bashrc"

  echo_script_status 1 "$scriptname"
  echo_br_bottom "System installation is complete. Re-login in tty as $cf_username and start graphical session by running: startx"
}

  [ -z "$1" ] || [ "$1" -eq "0" ] && pre_reboot_initial
[ ! -z "$1" ] && [ "$1" -eq "1" ] && pre_reboot_on_chroot
[ ! -z "$1" ] && [ "$1" -eq "2" ] && post_reboot
