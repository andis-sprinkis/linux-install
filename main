#!/usr/bin/env sh
set -e
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
. $dir/util
. $dir/config

format_partitions() {
  echo_fn_status 0 ${FUNCNAME[0]}

  mkfs.vfat -F32 $cf_boot_partition
  mkfs.$cf_mkfs_format_system_partition $cf_system_partition

  echo_fn_status 1 ${FUNCNAME[0]}
}

mount_partitions() {
  echo_fn_status 0 ${FUNCNAME[0]}

  mount $cf_system_partition /mnt
  mkdir /mnt/boot
  mount $cf_boot_partition /mnt/boot

  echo_fn_status 1 ${FUNCNAME[0]}
}

sort_pacman_mirrors() {
  echo_fn_status 0 ${FUNCNAME[0]}

  reflector --country $cf_pacman_mirror_country --protocol https --latest 5 --save /etc/pacman.d/mirrorlist

  echo_fn_status 1 ${FUNCNAME[0]}
}

install_base_packages() {
  echo_fn_status 0 ${FUNCNAME[0]}

  echo "/mnt $cf_base_packages" | xargs pacstrap

  echo_fn_status 1 ${FUNCNAME[0]}
}

generate_fstab() {
  echo_fn_status 0 ${FUNCNAME[0]}

  genfstab -U /mnt >> /mnt/etc/fstab

  echo_fn_status 1 ${FUNCNAME[0]}

}

cp_install_files_root() {
  echo_fn_status 0 ${FUNCNAME[0]}

  cp -rv $dir /mnt/linux-install

  echo_fn_status 1 ${FUNCNAME[0]}
}

add_enable_swapfile() {
  echo_fn_status 0 ${FUNCNAME[0]}

  # add and enable swapfile
  dd if=/dev/zero of=/swapfile bs=1M count=$cf_swap_M_count status=progress
  chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile
  echo /swapfile none swap defaults 0 0 >> /etc/fstab

  echo_fn_status 1 ${FUNCNAME[0]}
}

initialize_bootloader() {
  echo_fn_status 0 ${FUNCNAME[0]}

  bootctl --path=/boot install
  cp -rv $dir/sys-config/systemd-boot/* /
  echo "options root=PARTUUID=$(blkid -s PARTUUID -o value $cf_system_partition) rw" >> /boot/loader/entries/arch.conf

  echo_fn_status 1 ${FUNCNAME[0]}
}

enable_networkmanager() {
  echo_fn_status 0 ${FUNCNAME[0]}

  systemctl enable NetworkManager

  echo_fn_status 1 ${FUNCNAME[0]}
}

set_timezone() {
  echo_fn_status 0 ${FUNCNAME[0]}

  ln -sf /usr/share/zoneinfo/$cf_timezone /etc/localtime

  echo_fn_status 1 ${FUNCNAME[0]}
}

set_hardware_clock() {
  echo_fn_status 0 ${FUNCNAME[0]}

  hwclock --systohc 

  echo_fn_status 1 ${FUNCNAME[0]}
}

set_locale() {
  echo_fn_status 0 ${FUNCNAME[0]}

  cp $dir/sys-config/locale/etc/locale.gen /etc
  locale-gen
  cp $dir/sys-config/locale/etc/locale.conf /etc

  echo_fn_status 1 ${FUNCNAME[0]}
}

set_hostname() {
  echo_fn_status 0 ${FUNCNAME[0]}

  echo $cf_hostname > /etc/hostname

  echo_fn_status 1 ${FUNCNAME[0]}
}

set_root_password() {
  echo_fn_status 0 ${FUNCNAME[0]}

  set_user_pw root

  echo_fn_status 1 ${FUNCNAME[0]} 
}

create_regular_user() {
  echo_fn_status 0 ${FUNCNAME[0]}

  useradd -m $cf_username
  usermod -G wheel -a $cf_username
  set_user_pw $cf_username

  echo_fn_status 1 ${FUNCNAME[0]}
}

set_sudoers() {
  echo_fn_status 0 ${FUNCNAME[0]}

  cp $dir/sys-config/sudoers/etc/sudoers /etc

  echo_fn_status 1 ${FUNCNAME[0]}
}

change_shell() {
  echo_fn_status 0 ${FUNCNAME[0]}

  chsh -s /bin/zsh root
  chsh -s /bin/zsh $cf_username 
  touch /root/.zshrc
  touch /home/$cf_username/.zshrc

  echo_fn_status 1 ${FUNCNAME[0]}
}

install_pkg_pacman() {
  echo_fn_status 0 ${FUNCNAME[0]}

  sudo pacman -S --needed - < $dir/pkg-pacman 

  echo_fn_status 1 ${FUNCNAME[0]}
}

install_st() {
  echo_fn_status 0 ${FUNCNAME[0]}

  temp_path=$(mktemp -d)
  git clone https://github.com/andis-sprinkis/st.git $temp_path
  cd $temp_path
  git checkout 73c034ba05101e2fc337183af1cdec5bfe318b99
  make install
  cd $HOME

  echo_fn_status 1 ${FUNCNAME[0]}
}

su_regular_user() {
  su $cf_username --pty -c "/linux-install/main 2"
}

install_pkg_aur() {
  echo_fn_status 0 ${FUNCNAME[0]}

  if ! command -v yay &> /dev/null; then
    temp_path=$(mktemp -d)
    git clone https://aur.archlinux.org/yay.git $temp_path
    cd $temp_path
    makepkg -si
    cd $HOME
  fi
  yay -S --needed - < $dir/pkg-aur

  echo_fn_status 1 ${FUNCNAME[0]}
}

install_dotfile() {
  echo_fn_status 0 ${FUNCNAME[0]}

  temp_path=$(mktemp -d)
  git clone --separate-git-dir=$HOME/.dotfiles-git https://github.com/andis-sprinkis/linux-user-config $temp_path
  rsync --recursive --verbose --exclude '.git' $temp_path/ $HOME
  git --git-dir=$HOME/.dotfiles-git/ --work-tree=$HOME config --local status.showUntrackedFiles no
  [ ! -d $HOME/.config ] && mkdir -p $HOME/.config
  git clone https://github.com/andis-sprinkis/neovim-user-config $HOME/.config/nvim

  echo_fn_status 1 ${FUNCNAME[0]}
}

install_otf_cascadia_code() {
  echo_fn_status 0 ${FUNCNAME[0]}

  temp_path=$(mktemp -d)
  cd $temp_path
  wget https://github.com/microsoft/cascadia-code/releases/download/v2008.25/CascadiaCode-2008.25.zip &&
  unzip $temp_path/CascadiaCode-2008.25.zip -d $temp_path/unzip
  mkdir -p $HOME/.fonts/CascadiaCode-2008.25/otf/*
  cp -rv $temp_path/unzip/otf/* $HOME/.fonts/CascadiaCode-2008.25/otf/
  cd $HOME

  echo_fn_status 1 ${FUNCNAME[0]}
}

install_node_lts() {
  echo_fn_status 0 ${FUNCNAME[0]}

  mkdir -p $HOME/.nvm
  export NVM_DIR=$HOME/.nvm
  . /usr/share/nvm/nvm.sh
  nvm install lts/fermium
  nvm use lts/fermium
  nvm alias default lts/fermium

  echo_fn_status 1 ${FUNCNAME[0]}
}

set_post_reboot_script() {
  echo_fn_status 0 ${FUNCNAME[0]}

  echo "/linux-install/main 3" >> /home/${cf_username}/.zshrc

  echo_fn_status 1 ${FUNCNAME[0]}
}

activate_ntp() {
  echo_fn_status 0 ${FUNCNAME[0]}

  sudo timedatectl set-ntp on

  echo_fn_status 1 ${FUNCNAME[0]}
}

enable_vboxservice() {
  echo_fn_status 0 ${FUNCNAME[0]}

  if ! systemctl is-active --quiet vboxservice.service; then
    sudo systemctl enable --now vboxservice.service
  fi

  echo_fn_status 1 ${FUNCNAME[0]}
}

cleanup_zshrc() {
  echo_fn_status 0 ${FUNCNAME[0]}

  tmp=$(mktemp)
  path_zshrc=/home/${cf_username}/.zshrc
  head -n -1 $path_zshrc > $tmp && mv $tmp $path_zshrc

  echo_fn_status 0 ${FUNCNAME[1]}
}

pre_reboot_start() {
  scriptname="Pre-reboot system installation script"
  echo_script_status 0 "$scriptname"

  format_partitions
  mount_partitions
  sort_pacman_mirrors
  install_base_packages
  generate_fstab
  cp_install_files_root
  arch-chroot /mnt /linux-install/main 1

  echo_script_status 1 "$scriptname"
}

on_chroot() {
  scriptname="On chroot system installation script"
  echo_script_status 0 "$scriptname"

  initialize_bootloader
  add_enable_swapfile
  enable_networkmanager
  set_timezone
  set_hardware_clock
  set_locale
  set_hostname
  set_root_password
  create_regular_user
  set_sudoers
  install_pkg_pacman
  install_st
  change_shell
  su_regular_user

  echo_script_status 1 "$scriptname"
}

on_su_regular_user() {
  scriptname="On substitute regular user system installation script"
  echo_script_status 0 "$scriptname"

  install_pkg_aur
  install_dotfile
  install_otf_cascadia_code
  install_node_lts
  set_post_reboot_script

  echo_script_status 1 "$scriptname"
}


post_reboot() {
  scriptname="Post-reboot system installation script"
  echo_script_status 0 "$scriptname"

  activate_ntp
  enable_vboxservice
  cleanup_zshrc

  echo_script_status 1 "$scriptname"
}

[   -z "$1" ] || [ "$1" -eq "0" ] && pre_reboot_start
[ ! -z "$1" ] && [ "$1" -eq "1" ] && on_chroot && systemctl reboot
[ ! -z "$1" ] && [ "$1" -eq "2" ] && on_su_regular_user
[ ! -z "$1" ] && [ "$1" -eq "3" ] && post_reboot
