#!/usr/bin/env bash
set -e
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
. $dir/nix-script-util/nix-script-util.bash
. $dir/config

# Functions

check_partitions() {
  if [ ! -b "$cf_dev_partition_boot" ]; then
    echo "Device mapping $cf_dev_partition_boot does not exist."
    exit 1
  fi

  if [ ! -b "$cf_dev_partition_root" ]; then
    echo "Device mapping $cf_dev_partition_root does not exist."
    exit 1
  fi

  if [ ! -z "$cf_dev_partition_home" ] && [ ! -b "$cf_dev_partition_home" ]; then
    echo "Device mapping $cf_dev_partition_home does not exist."
    exit 1
  fi

  if [ ! -z "$cf_dev_partition_var" ] && [ ! -b "$cf_dev_partition_var" ]; then
    echo "Device mapping $cf_dev_partition_var does not exist."
    exit 1
  fi
}

format_partitions() {
  mkfs.vfat -F32 $cf_dev_partition_boot
  mkfs.$cf_mkfs_main_file_system $cf_dev_partition_root

  if [ ! -z "$cf_dev_partition_home" ]; then
    mkfs.$cf_mkfs_main_file_system $cf_dev_partition_home
  fi

  if [ ! -z "$cf_dev_partition_var" ]; then
    mkfs.$cf_mkfs_main_file_system $cf_dev_partition_var
  fi
}

mount_partitions() {
  mount $cf_dev_partition_root /mnt

  mkdir -p /mnt/boot
  mount $cf_dev_partition_boot /mnt/boot

  if [ ! -z "$cf_dev_partition_home" ]; then
    mkdir -p /mnt/home
    mount $cf_dev_partition_home /mnt/home
  fi

  if [ ! -z "$cf_dev_partition_var" ]; then
    mkdir -p /mnt/var
    mount $cf_dev_partition_var /mnt/var
  fi
}

sort_pacman_mirrors() {
  reflector --country $cf_pacman_mirror_country --protocol https --latest $cf_pacman_mirror_count --save /etc/pacman.d/mirrorlist
}

install_base_packages() {
  pacstrap /mnt $(echo $(cat $dir/pkg_base))
}

generate_fstab() {
  genfstab -U /mnt >> /mnt/etc/fstab
}

cp_install_files_root() {
  cp -rv $dir /mnt/linux-install
}

add_enable_swapfile() {
  dd if=/dev/zero of=/swapfile bs=1M count=$cf_swap_M_count status=progress
  chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile
  echo "/swapfile none swap defaults 0 0" >> /etc/fstab
}

initialize_bootloader() {
  bootctl --path=/boot install
  cp -rv $dir/sys_config/systemd-boot/* /
  echo "options root=PARTUUID=$(blkid -s PARTUUID -o value $cf_dev_partition_root) rw" >> /boot/loader/entries/arch.conf
}

enable_networkmanager() {
  systemctl enable NetworkManager
}

set_timezone() {
  ln -sf /usr/share/zoneinfo/$cf_timezone /etc/localtime
}

set_hardware_clock() {
  hwclock --systohc 
}

set_locale() {
  printf "$cf_locale_gen" > /etc/locale.gen
  locale-gen
  printf "$cf_locale_conf" > /etc/locale.conf
}

set_hostname() {
  echo "$cf_hostname" > /etc/hostname
}

set_root_password() {
  set_user_pw_confirm root
}

create_regular_user() {
  useradd -m $cf_username
  usermod -G wheel -a $cf_username
  set_user_pw_confirm $cf_username
}

set_sudoers() {
  cp $dir/sys_config/sudoers/etc/sudoers /etc
}

create_user_mnt_dirs() {
  local dirs=$(eval "echo $cf_user_mnt_dirs")

  if [ ! -z "$dirs" ]; then
    mkdir -p $dirs
    chown $cf_username:$cf_username $dirs
  fi
}

create_user_home_dirs() {
  local dirs=$(eval "echo $cf_user_home_dirs")

  if [ ! -z "$dirs" ]; then
    mkdir -p $dirs
    chown $cf_username:$cf_username $dirs
  fi
}

change_shell() {
  sudo chsh -s /bin/zsh root
  if [ ! -f /root/.zshrc ]; then
    sudo touch /root/.zshrc
  fi

  chsh -s /bin/zsh $cf_username 
  if [ ! -f /home/$cf_username/.zshrc ]; then
    touch /home/$cf_username/.zshrc
  fi
}

install_pkg_pacman() {
  if [ -s $dir/pkg_pacman ]; then
    sudo pacman -S --needed $(echo $(cat $dir/pkg_pacman))
  fi
}

install_pkg_aur() {
  if ! command -v yay &> /dev/null; then
    temp_path=$(mktemp -d)
    git clone https://aur.archlinux.org/yay.git $temp_path
    cd $temp_path
    makepkg -si
    cd $HOME
  fi

  if [ -s $dir/pkg_aur ]; then
    yay -S --needed $(echo $(cat $dir/pkg_aur))
  fi
}

install_user_config() {
  if [ ! -z "$cf_git_url_nix_user_config" ]; then
    curl -LO $cf_user_config_init_script_url --output $HOME/init_user_config
    chmod +x $HOME/init_user_config
    $HOME/init_user_config "$cf_user_config_init_script_args"
    rm $HOME/init_user_config
  fi
}

install_nodejs() {
  mkdir -p $HOME/.nvm
  export NVM_DIR=$HOME/.nvm
  . /usr/share/nvm/nvm.sh

  if [ ! -z "$cf_nvm_default_nodejs_version" ]; then
    nvm install $cf_nvm_default_nodejs_version
    nvm alias default $cf_nvm_default_nodejs_version
    nvm use default
  fi
}

install_pkg_npm() {
  if [ ! -z "$cf_nvm_default_nodejs_version" ] && [ -s $dir/pkg_npm ]; then
    npm install --global $(echo $(cat $dir/pkg_npm))
  fi
}

set_post_reboot_stage() {
  echo "/linux-install/main 2" >> /home/${cf_username}/.bashrc
}

activate_ntp() {
  sudo timedatectl set-ntp on
}

install_vbox_guest_mode() {
  if [ "$cf_is_vbox_guest" -eq "1" ]; then
    sudo pacman -S virtualbox-guest-utils
    sudo systemctl enable --now vboxservice.service
  fi
}

cleanup_bashrc() {
  tmp=$(mktemp)
  path_bashrc=/home/${cf_username}/.bashrc
  head -n -1 $path_bashrc > $tmp && mv $tmp $path_bashrc
}

# Stages

pre_reboot_initial() {
  stage="Pre-reboot initial system installation"
  echo_stage_status 0 "$stage"

  fn_call \
    "check_partitions" \
    "format_partitions" \
    "mount_partitions" \
    "sort_pacman_mirrors" \
    "install_base_packages" \
    "generate_fstab" \
    "cp_install_files_root"

  arch-chroot /mnt /linux-install/main 1
  echo_stage_status 1 "$stage"
}

pre_reboot_on_chroot() {
  stage="Pre-reboot on-chroot system installation"
  echo_stage_status 0 "$stage"

  fn_call \
    "initialize_bootloader" \
    "add_enable_swapfile" \
    "enable_networkmanager" \
    "set_timezone" \
    "set_hardware_clock" \
    "set_locale" \
    "set_hostname" \
    "set_root_password" \
    "create_regular_user" \
    "set_sudoers" \
    "create_user_mnt_dirs" \
    "create_user_home_dirs" \
    "set_post_reboot_stage"

  echo_stage_status 1 "$stage"
  echo_br_bottom "Please reboot now and log into tty as $cf_username to complete the installation!"
}

post_reboot() {
  stage="Post-reboot system installation"
  echo_stage_status 0 "$stage"

  fn_call \
    "activate_ntp" \
    "install_vbox_guest_mode" \
    "install_pkg_pacman" \
    "install_pkg_aur" \
    "install_user_config" \
    "install_nodejs" \
    "install_pkg_npm" \
    "change_shell" \
    "cleanup_bashrc"

  echo_stage_status 1 "$stage"
  echo_br_bottom "System installation is complete. Re-login in tty as $cf_username and start graphical session by running: startx"
}

  [ -z "$1" ] || [ "$1" -eq "0" ] && pre_reboot_initial
[ ! -z "$1" ] && [ "$1" -eq "1" ] && pre_reboot_on_chroot
[ ! -z "$1" ] && [ "$1" -eq "2" ] && post_reboot
